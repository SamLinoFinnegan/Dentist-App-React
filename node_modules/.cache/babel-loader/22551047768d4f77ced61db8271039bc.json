{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bernard\\\\Desktop\\\\Winc_Academy\\\\vscode\\\\react\\\\Dentist App\\\\src\\\\Container.js\";\nimport React from \"react\";\nimport App from \"./App\";\nimport generateRandomAppointments from \"./utils\";\n\nclass SmileUp extends React.Component {\n  constructor() {\n    super();\n\n    this.addEmployee = event => {\n      let name = event.target.name.value;\n      let surname = event.target.surname.value;\n      const birthyear = event.target.birthyear.value;\n      const occupation = event.target.occupation.value;\n      const phone = event.target.phone.value;\n      const email = event.target.email.value;\n\n      if (name === \"\") {\n        name = \"John\";\n      }\n\n      if (surname === \"\") {\n        surname = \"Doe\";\n      }\n\n      const newEmployee = {\n        id: nanoid(),\n        name: name,\n        surname: surname,\n        occupation: occupation,\n        phone: phone,\n        email: email,\n        birthyear: birthyear,\n        sick: false\n      };\n      const newEmployeeList = [newEmployee, ...this.state.employees];\n      this.setState({\n        employees: newEmployeeList\n      });\n      event.preventDefault();\n    };\n\n    this.addPatient = event => {\n      const name = event.target.name.value;\n      const surname = event.target.surname.value;\n      const birthyear = event.target.birthyear.value;\n      const phone = event.target.phone.value;\n      const email = event.target.email.value;\n\n      if (name !== \"\") {\n        if (surname !== \"\") {\n          const newPatient = {\n            id: nanoid(),\n            name: name,\n            surname: surname,\n            phone: phone,\n            email: email,\n            birthyear: birthyear,\n            sick: false\n          };\n          const newPatientList = [newPatient, ...this.state.patients];\n          this.setState({\n            patients: newPatientList\n          });\n        }\n      }\n\n      event.preventDefault();\n    };\n\n    this.makeEmployeeSick = event => {\n      const ID = event.target.parentElement.parentElement.id;\n      const target = [...this.state.employees].find(employee => employee.id === ID);\n      const newList = [...this.state.employees].map(employee => {\n        if (employee === target) {\n          employee.sick = !employee.sick;\n        }\n\n        return employee;\n      });\n      this.setState({\n        employees: newList\n      });\n    };\n\n    this.filterSickPatients = person => {\n      const newList = [...this.state.appointments].filter(app => app.patient !== person);\n      this.setState({\n        appointments: newList\n      });\n    };\n\n    this.makePatientSick = event => {\n      const ID = event.target.parentElement.parentElement.id;\n      const target = [...this.state.patients].find(patient => patient.id === ID);\n      const newList = [...this.state.patients].map(patient => {\n        if (patient === target) {\n          patient.sick = !patient.sick;\n        }\n\n        return patient;\n      });\n      this.setState({\n        patient: newList\n      });\n      this.filterSickPatients(target);\n    };\n\n    this.addAppointment = event => {\n      const patient = [...this.state.patients].find(patient => patient.id === event.target.patient.value);\n      const dentist = [...this.state.employees].find(dentist => dentist.id === event.target.dentist.value);\n      const assistent = [...this.state.employees].find(assistent => assistent.id === event.target.assistent.value);\n      const day = parseInt(event.target.day.value);\n      const time = parseInt(event.target.time.value);\n      const newAppointment = {\n        id: nanoid(),\n        day: day,\n        time: time,\n        patient: patient,\n        dentist: dentist,\n        assistent: assistent\n      };\n      const matchDentist = [...this.state.appointments].find(app => {\n        return app.day === day && app.time === time && app.dentist === dentist;\n      });\n      const matchAssistent = [...this.state.appointments].find(app => {\n        if (assistent !== undefined) {\n          return app.day === day && app.time === time && app.assistent === assistent;\n        }\n\n        return false;\n      });\n\n      if (matchDentist && matchAssistent) {\n        alert(\"Dentist and Assistent not available\");\n      } else if (matchDentist) {\n        alert(\"Dentist not available\");\n      } else if (matchAssistent) {\n        alert(\"Assistent not available\");\n      } else {\n        const newList = [newAppointment, ...this.state.appointments];\n        this.setState({\n          appointments: newList\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    this.removeAppointment = event => {\n      const appointment = [...this.state.appointments].find(app => app.id === event.target.id);\n      const newList = [...this.state.appointments].filter(app => app !== appointment);\n      this.setState({\n        appointments: newList\n      });\n    };\n\n    this.moveAppointment = event => {\n      let dayValidator = false;\n      let timeValidator = false;\n      let day = 0;\n      let time = 0;\n\n      while (!dayValidator) {\n        day = parseInt(prompt(\"set a new day between 1 to 28\"));\n\n        if (day > 0 && day < 29) {\n          dayValidator = true;\n        }\n      }\n\n      while (!timeValidator) {\n        time = parseInt(prompt(\"set a new time between 8 and 18\"));\n\n        if (time > 7 && time < 19) {\n          timeValidator = true;\n        }\n      }\n\n      const appointmentToDelete = [...this.state.appointments].find(app => app.id === event.target.id);\n      const newAppointment = {\n        id: appointmentToDelete.id,\n        day: day,\n        time: time,\n        patient: appointmentToDelete.patient,\n        dentist: appointmentToDelete.dentist,\n        assistent: appointmentToDelete.assistent\n      };\n      const matchDentist = [...this.state.appointments].find(app => {\n        return app.day === day && app.time === time && app.dentist === appointmentToDelete.dentist;\n      });\n      const matchAssistent = [...this.state.appointments].find(app => {\n        return app.day === day && app.time === time && app.assistent === appointmentToDelete.assistent;\n      });\n\n      if (matchDentist && matchAssistent) {\n        alert(\"Dentist and Assistent not available\");\n      } else if (matchDentist) {\n        alert(\"Dentist not available\");\n      } else if (matchAssistent) {\n        alert(\"Assistent not available\");\n      } else {\n        const appointmentRemoved = [...this.state.appointments].filter(app => app !== appointmentToDelete);\n        const newList = [newAppointment, ...appointmentRemoved];\n        this.setState({\n          appointments: newList\n        });\n      }\n    };\n\n    const randomAppointments = generateRandomAppointments(150);\n    const dentists = [...new Set(randomAppointments.map(item => item.dentist))];\n    const assistents = [...new Set(randomAppointments.map(item => item.assistent))];\n    const patients = [...new Set(randomAppointments.map(item => item.patient))];\n    const employees = [...dentists, ...assistents];\n    this.state = {\n      appointments: randomAppointments,\n      employees: employees,\n      patients: patients\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(App, {\n      appointments: this.state.appointments,\n      employees: this.state.employees,\n      patients: this.state.patients,\n      addPatient: this.addPatient,\n      makePatientSick: this.makePatientSick,\n      addEmployee: this.addEmployee,\n      makeEmployeeSick: this.makeEmployeeSick,\n      addAppointment: this.addAppointment,\n      removeAppointment: this.removeAppointment,\n      moveAppointment: this.moveAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default SmileUp;","map":{"version":3,"sources":["C:/Users/Bernard/Desktop/Winc_Academy/vscode/react/Dentist App/src/Container.js"],"names":["React","App","generateRandomAppointments","SmileUp","Component","constructor","addEmployee","event","name","target","value","surname","birthyear","occupation","phone","email","newEmployee","id","nanoid","sick","newEmployeeList","state","employees","setState","preventDefault","addPatient","newPatient","newPatientList","patients","makeEmployeeSick","ID","parentElement","find","employee","newList","map","filterSickPatients","person","appointments","filter","app","patient","makePatientSick","addAppointment","dentist","assistent","day","parseInt","time","newAppointment","matchDentist","matchAssistent","undefined","alert","removeAppointment","appointment","moveAppointment","dayValidator","timeValidator","prompt","appointmentToDelete","appointmentRemoved","randomAppointments","dentists","Set","item","assistents","render"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport App from \"./App\"\r\nimport generateRandomAppointments from \"./utils\";\r\n\r\n\r\nclass SmileUp extends React.Component {\r\n    constructor() {\r\n        super();\r\n        const randomAppointments = generateRandomAppointments(150);\r\n        const dentists = [...new Set(randomAppointments.map(item => item.dentist))];\r\n        const assistents = [...new Set(randomAppointments.map(item => item.assistent))];\r\n        const patients = [...new Set(randomAppointments.map(item => item.patient))];\r\n        const employees = [...dentists, ...assistents];\r\n        this.state = {\r\n            appointments: randomAppointments,\r\n            employees: employees,\r\n            patients: patients,\r\n        }\r\n    }\r\n\r\n    addEmployee = event => {\r\n        let name = event.target.name.value\r\n        let surname = event.target.surname.value\r\n        const birthyear = event.target.birthyear.value\r\n        const occupation = event.target.occupation.value\r\n        const phone = event.target.phone.value\r\n        const email = event.target.email.value\r\n        if (name === \"\") { name = \"John\" }\r\n        if (surname === \"\") { surname = \"Doe\" }\r\n        const newEmployee = {\r\n            id: nanoid(),\r\n            name: name,\r\n            surname: surname,\r\n            occupation: occupation,\r\n            phone: phone,\r\n            email: email,\r\n            birthyear: birthyear,\r\n            sick: false,\r\n        };\r\n        const newEmployeeList = [newEmployee, ...this.state.employees];\r\n        this.setState({ employees: newEmployeeList })\r\n        event.preventDefault();\r\n    }\r\n    addPatient = event => {\r\n        const name = event.target.name.value\r\n        const surname = event.target.surname.value\r\n        const birthyear = event.target.birthyear.value\r\n        const phone = event.target.phone.value\r\n        const email = event.target.email.value\r\n        if (name !== \"\") {\r\n            if (surname !== \"\") {\r\n                const newPatient = {\r\n                    id: nanoid(),\r\n                    name: name,\r\n                    surname: surname,\r\n                    phone: phone,\r\n                    email: email,\r\n                    birthyear: birthyear,\r\n                    sick: false,\r\n                };\r\n                const newPatientList = [newPatient, ...this.state.patients];\r\n                this.setState({ patients: newPatientList })\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    makeEmployeeSick = event => {\r\n        const ID = event.target.parentElement.parentElement.id;\r\n        const target = [...this.state.employees].find(employee => employee.id === ID);\r\n        const newList = [...this.state.employees].map(employee => {\r\n            if (employee === target) {\r\n                employee.sick = !employee.sick;\r\n            }\r\n            return employee;\r\n        })\r\n        this.setState({ employees: newList })\r\n    }\r\n\r\n    filterSickPatients = (person) => {\r\n        const newList = [...this.state.appointments].filter(app => app.patient !== person)\r\n        this.setState({ appointments: newList })\r\n    }\r\n\r\n    makePatientSick = event => {\r\n        const ID = event.target.parentElement.parentElement.id;\r\n        const target = [...this.state.patients].find(patient => patient.id === ID);\r\n        const newList = [...this.state.patients].map(patient => {\r\n            if (patient === target) {\r\n                patient.sick = !patient.sick;\r\n            }\r\n            return patient;\r\n        })\r\n        this.setState({ patient: newList })\r\n        this.filterSickPatients(target);\r\n    }\r\n\r\n    addAppointment = event => {\r\n        const patient = [...this.state.patients].find(patient => patient.id === event.target.patient.value);\r\n        const dentist = [...this.state.employees].find(dentist => dentist.id === event.target.dentist.value);\r\n        const assistent = [...this.state.employees].find(assistent => assistent.id === event.target.assistent.value);\r\n        const day = parseInt(event.target.day.value);\r\n        const time = parseInt(event.target.time.value);\r\n        const newAppointment = { id: nanoid(), day: day, time: time, patient: patient, dentist: dentist, assistent: assistent };\r\n        const matchDentist = [...this.state.appointments].find(app => {\r\n            return app.day === day && app.time === time && app.dentist === dentist\r\n        });\r\n        const matchAssistent = [...this.state.appointments].find(app => {\r\n            if (assistent !== undefined) {\r\n                return app.day === day && app.time === time && app.assistent === assistent\r\n            }\r\n            return false\r\n        })\r\n        if (matchDentist && matchAssistent) {\r\n            alert(\"Dentist and Assistent not available\");\r\n        } else if (matchDentist) {\r\n            alert(\"Dentist not available\");\r\n        } else if (matchAssistent) {\r\n            alert(\"Assistent not available\");\r\n        } else {\r\n            const newList = [newAppointment, ...this.state.appointments];\r\n            this.setState({ appointments: newList });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    removeAppointment = event => {\r\n        const appointment = [...this.state.appointments].find(app => app.id === event.target.id);\r\n        const newList = [...this.state.appointments].filter(app => app !== appointment);\r\n        this.setState({ appointments: newList })\r\n    }\r\n\r\n    moveAppointment = event => {\r\n        let dayValidator = false;\r\n        let timeValidator = false;\r\n        let day = 0;\r\n        let time = 0;\r\n        while (!dayValidator) {\r\n            day = parseInt(prompt(\"set a new day between 1 to 28\"));\r\n            if (day > 0 && day < 29) {\r\n                dayValidator = true\r\n            }\r\n        }\r\n        while (!timeValidator) {\r\n            time = parseInt(prompt(\"set a new time between 8 and 18\"));\r\n            if (time > 7 && time < 19) {\r\n                timeValidator = true\r\n            }\r\n        }\r\n        const appointmentToDelete = [...this.state.appointments].find(app => app.id === event.target.id);\r\n        const newAppointment = { id: appointmentToDelete.id, day: day, time: time, patient: appointmentToDelete.patient, dentist: appointmentToDelete.dentist, assistent: appointmentToDelete.assistent };\r\n\r\n        const matchDentist = [...this.state.appointments].find(app => {\r\n            return app.day === day && app.time === time && app.dentist === appointmentToDelete.dentist\r\n        });\r\n        const matchAssistent = [...this.state.appointments].find(app => {\r\n            return app.day === day && app.time === time && app.assistent === appointmentToDelete.assistent\r\n        })\r\n        if (matchDentist && matchAssistent) {\r\n            alert(\"Dentist and Assistent not available\");\r\n        } else if (matchDentist) {\r\n            alert(\"Dentist not available\");\r\n        } else if (matchAssistent) {\r\n            alert(\"Assistent not available\");\r\n        } else {\r\n            const appointmentRemoved = [...this.state.appointments].filter(app => app !== appointmentToDelete);\r\n            const newList = [newAppointment, ...appointmentRemoved];\r\n            this.setState({ appointments: newList });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <App\r\n                    appointments={this.state.appointments}\r\n                    employees={this.state.employees}\r\n                    patients={this.state.patients}\r\n                    addPatient={this.addPatient}\r\n                    makePatientSick={this.makePatientSick}\r\n                    addEmployee={this.addEmployee}\r\n                    makeEmployeeSick={this.makeEmployeeSick}\r\n                    addAppointment={this.addAppointment}\r\n                    removeAppointment={this.removeAppointment}\r\n                    moveAppointment={this.moveAppointment}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SmileUp"]},"metadata":{},"sourceType":"module"}